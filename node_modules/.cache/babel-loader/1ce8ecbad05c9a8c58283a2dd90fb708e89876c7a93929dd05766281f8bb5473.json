{"ast":null,"code":"import { axiosInstance } from \"../../Axios\";\nimport { tokenConfig } from \"./auth\";\nimport { returnErrors } from \"./error\";\nimport { setLoading } from \"./loader\";\nconst initialState = {\n  overview: {},\n  metrics: false,\n  user_accounts: [],\n  metrics_login_id: ''\n};\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_OVERVIEW':\n      const overview_state = {\n        ...state.overview\n      };\n      overview_state[action.payload.login_id] = action.payload;\n      return {\n        ...state,\n        overview: {\n          ...overview_state\n        }\n      };\n    case 'SET_ACCOUNT_METRICS':\n      return {\n        ...state,\n        metrics: action.payload\n      };\n    case 'SET_USE_ACCOUNTS':\n      return {\n        ...state,\n        user_accounts: action.payload\n      };\n    case 'SET_LOGIN_ID':\n      return {\n        ...state,\n        metrics_login_id: action.payload\n      };\n    case 'CLEAR_ACCOUNT_METRICS':\n      return {\n        ...state,\n        metrics: false\n      };\n    case 'RESET_DASHBOARD':\n      return initialState;\n    default:\n      return state;\n  }\n};\nconst setOverview = payload => ({\n  type: 'SET_OVERVIEW',\n  payload\n});\nconst setAccountMetrics = payload => ({\n  type: 'SET_ACCOUNT_METRICS',\n  payload\n});\nexport const clearAccountMetrics = () => ({\n  type: 'CLEAR_ACCOUNT_METRICS'\n});\nexport const setLoginId = payload => ({\n  type: 'SET_LOGIN_ID',\n  payload\n});\nconst setUserAccounts = payload => ({\n  type: 'SET_USE_ACCOUNTS',\n  payload\n});\nexport const resetDashboard = payload => ({\n  type: 'RESET_DASHBOARD',\n  payload\n});\nexport const getAccountsOverview = login => async (dispatch, getState) => {\n  try {\n    const {\n      data,\n      status\n    } = await axiosInstance.get(`/accounts/overview/${login}/`, tokenConfig(getState));\n    if (status > 399) throw data;\n    dispatch(setOverview(data));\n    return data;\n  } catch (error) {\n    var _error$response$data;\n    console.log(error);\n    dispatch(returnErrors((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail, error.response.status));\n    throw error.response.data;\n  }\n};\nexport const getAccountMetrics = login => async (dispatch, getState) => {\n  const metrics = getState().dashboard.metrics;\n  if (login && metrics && metrics.login_id !== login) dispatch(clearAccountMetrics());\n  try {\n    dispatch(setLoading(true));\n    const {\n      data,\n      status\n    } = await axiosInstance.get(`/accounts/accountmetrics/${login}/`, tokenConfig(getState));\n    if (status > 399) throw data;\n    dispatch(setAccountMetrics(data));\n    dispatch(setLoading(false));\n  } catch (error) {\n    var _error$response$data2;\n    dispatch(setLoading(false));\n    console.log(error);\n    dispatch(returnErrors((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail, error.response.status));\n    throw error.response.data;\n  }\n};\nexport const getUserAccounts = () => async (dispatch, getState) => {\n  try {\n    const {\n      data,\n      status\n    } = await axiosInstance.get('/accounts/user-accounts/', tokenConfig(getState));\n    if (status > 399) throw data;\n    dispatch(setUserAccounts(data));\n  } catch (error) {\n    var _error$response$data3;\n    console.log(error);\n    dispatch(returnErrors((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.detail, error.response.status));\n    throw error.response.data;\n  }\n};\nexport default dashboardReducer;","map":{"version":3,"names":["axiosInstance","tokenConfig","returnErrors","setLoading","initialState","overview","metrics","user_accounts","metrics_login_id","dashboardReducer","state","action","type","overview_state","payload","login_id","setOverview","setAccountMetrics","clearAccountMetrics","setLoginId","setUserAccounts","resetDashboard","getAccountsOverview","login","dispatch","getState","data","status","get","error","_error$response$data","console","log","response","detail","getAccountMetrics","dashboard","_error$response$data2","getUserAccounts","_error$response$data3"],"sources":["/Users/fahedsayyed/Documents/mac-and-gray/src/store/reducers/dashboard.js"],"sourcesContent":["import { axiosInstance } from \"../../Axios\";\r\nimport { tokenConfig } from \"./auth\";\r\nimport { returnErrors } from \"./error\";\r\nimport { setLoading } from \"./loader\";\r\n\r\nconst initialState = {\r\n    overview: {},\r\n    metrics: false,\r\n    user_accounts: [],\r\n    metrics_login_id: ''\r\n}\r\n\r\nconst dashboardReducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_OVERVIEW':\r\n            const overview_state = {\r\n                ...state.overview\r\n            }\r\n            overview_state[action.payload.login_id] = action.payload\r\n            return {\r\n                ...state,\r\n                overview: {\r\n                    ...overview_state\r\n                }\r\n            }\r\n        case 'SET_ACCOUNT_METRICS':\r\n            return {\r\n                ...state,\r\n                metrics: action.payload\r\n            }\r\n        case 'SET_USE_ACCOUNTS':\r\n            return {\r\n                ...state,\r\n                user_accounts: action.payload\r\n            }\r\n        case 'SET_LOGIN_ID':\r\n            return {\r\n                ...state,\r\n                metrics_login_id: action.payload\r\n            }\r\n        case 'CLEAR_ACCOUNT_METRICS':\r\n            return {\r\n                ...state,\r\n                metrics:false\r\n            }\r\n        case 'RESET_DASHBOARD':\r\n            return initialState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst setOverview = (payload) => ({\r\n    type: 'SET_OVERVIEW',\r\n    payload\r\n})\r\n\r\nconst setAccountMetrics = (payload) => ({\r\n    type: 'SET_ACCOUNT_METRICS',\r\n    payload\r\n})\r\n\r\nexport const clearAccountMetrics = () => ({\r\n    type: 'CLEAR_ACCOUNT_METRICS'\r\n})\r\n\r\nexport const setLoginId = (payload) => ({\r\n    type: 'SET_LOGIN_ID',\r\n    payload\r\n})\r\n\r\nconst setUserAccounts = (payload) => ({\r\n    type: 'SET_USE_ACCOUNTS',\r\n    payload\r\n})\r\n\r\nexport const resetDashboard = (payload) => ({\r\n    type: 'RESET_DASHBOARD',\r\n    payload\r\n})\r\n\r\nexport const getAccountsOverview = (login) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        const {data, status} = await axiosInstance.get(`/accounts/overview/${login}/`, tokenConfig(getState));\r\n        if(status>399) throw(data);\r\n        dispatch(setOverview(data));\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(returnErrors(error.response.data?.detail,error.response.status))\r\n        throw(error.response.data)\r\n    }\r\n\r\n};\r\n\r\nexport const getAccountMetrics = (login) => async (dispatch, getState) => {\r\n    const metrics = getState().dashboard.metrics;\r\n    if(login && metrics && metrics.login_id !== login) dispatch(clearAccountMetrics());\r\n    try {\r\n        dispatch(setLoading(true));\r\n        const {data, status} = await axiosInstance.get(`/accounts/accountmetrics/${login}/`, tokenConfig(getState));\r\n        if(status>399) throw(data);\r\n        dispatch(setAccountMetrics(data));\r\n        dispatch(setLoading(false));\r\n    } catch (error) {\r\n        dispatch(setLoading(false));\r\n        console.log(error)\r\n        dispatch(returnErrors(error.response.data?.detail,error.response.status))\r\n        throw(error.response.data)\r\n    }\r\n\r\n};\r\n\r\nexport const getUserAccounts = () => async (dispatch, getState) => {\r\n    try {\r\n        const {data, status} = await axiosInstance.get('/accounts/user-accounts/', tokenConfig(getState));\r\n        if(status>399) throw(data);\r\n        dispatch(setUserAccounts(data));\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(returnErrors(error.response.data?.detail,error.response.status))\r\n        throw(error.response.data)\r\n    }\r\n}\r\n\r\nexport default dashboardReducer;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,aAAa;AAC3C,SAASC,WAAW,QAAQ,QAAQ;AACpC,SAASC,YAAY,QAAQ,SAAS;AACtC,SAASC,UAAU,QAAQ,UAAU;AAErC,MAAMC,YAAY,GAAG;EACjBC,QAAQ,EAAE,CAAC,CAAC;EACZC,OAAO,EAAE,KAAK;EACdC,aAAa,EAAE,EAAE;EACjBC,gBAAgB,EAAE;AACtB,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAACC,KAAK,GAACN,YAAY,EAAEO,MAAM,KAAK;EACrD,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,cAAc;MACf,MAAMC,cAAc,GAAG;QACnB,GAAGH,KAAK,CAACL;MACb,CAAC;MACDQ,cAAc,CAACF,MAAM,CAACG,OAAO,CAACC,QAAQ,CAAC,GAAGJ,MAAM,CAACG,OAAO;MACxD,OAAO;QACH,GAAGJ,KAAK;QACRL,QAAQ,EAAE;UACN,GAAGQ;QACP;MACJ,CAAC;IACL,KAAK,qBAAqB;MACtB,OAAO;QACH,GAAGH,KAAK;QACRJ,OAAO,EAAEK,MAAM,CAACG;MACpB,CAAC;IACL,KAAK,kBAAkB;MACnB,OAAO;QACH,GAAGJ,KAAK;QACRH,aAAa,EAAEI,MAAM,CAACG;MAC1B,CAAC;IACL,KAAK,cAAc;MACf,OAAO;QACH,GAAGJ,KAAK;QACRF,gBAAgB,EAAEG,MAAM,CAACG;MAC7B,CAAC;IACL,KAAK,uBAAuB;MACxB,OAAO;QACH,GAAGJ,KAAK;QACRJ,OAAO,EAAC;MACZ,CAAC;IACL,KAAK,iBAAiB;MAClB,OAAOF,YAAY;IACvB;MACI,OAAOM,KAAK;EACpB;AACJ,CAAC;AAED,MAAMM,WAAW,GAAIF,OAAO,KAAM;EAC9BF,IAAI,EAAE,cAAc;EACpBE;AACJ,CAAC,CAAC;AAEF,MAAMG,iBAAiB,GAAIH,OAAO,KAAM;EACpCF,IAAI,EAAE,qBAAqB;EAC3BE;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMI,mBAAmB,GAAGA,CAAA,MAAO;EACtCN,IAAI,EAAE;AACV,CAAC,CAAC;AAEF,OAAO,MAAMO,UAAU,GAAIL,OAAO,KAAM;EACpCF,IAAI,EAAE,cAAc;EACpBE;AACJ,CAAC,CAAC;AAEF,MAAMM,eAAe,GAAIN,OAAO,KAAM;EAClCF,IAAI,EAAE,kBAAkB;EACxBE;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMO,cAAc,GAAIP,OAAO,KAAM;EACxCF,IAAI,EAAE,iBAAiB;EACvBE;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMQ,mBAAmB,GAAIC,KAAK,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAExE,IAAI;IACA,MAAM;MAACC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAM3B,aAAa,CAAC4B,GAAG,CAAC,sBAAsBL,KAAK,GAAG,EAAEtB,WAAW,CAACwB,QAAQ,CAAC,CAAC;IACrG,IAAGE,MAAM,GAAC,GAAG,EAAE,MAAMD,IAAI;IACzBF,QAAQ,CAACR,WAAW,CAACU,IAAI,CAAC,CAAC;IAC3B,OAAOA,IAAI;EACf,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAC,oBAAA;IACZC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClBL,QAAQ,CAACtB,YAAY,EAAA4B,oBAAA,GAACD,KAAK,CAACI,QAAQ,CAACP,IAAI,cAAAI,oBAAA,uBAAnBA,oBAAA,CAAqBI,MAAM,EAACL,KAAK,CAACI,QAAQ,CAACN,MAAM,CAAC,CAAC;IACzE,MAAME,KAAK,CAACI,QAAQ,CAACP,IAAI;EAC7B;AAEJ,CAAC;AAED,OAAO,MAAMS,iBAAiB,GAAIZ,KAAK,IAAK,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACtE,MAAMnB,OAAO,GAAGmB,QAAQ,CAAC,CAAC,CAACW,SAAS,CAAC9B,OAAO;EAC5C,IAAGiB,KAAK,IAAIjB,OAAO,IAAIA,OAAO,CAACS,QAAQ,KAAKQ,KAAK,EAAEC,QAAQ,CAACN,mBAAmB,CAAC,CAAC,CAAC;EAClF,IAAI;IACAM,QAAQ,CAACrB,UAAU,CAAC,IAAI,CAAC,CAAC;IAC1B,MAAM;MAACuB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAM3B,aAAa,CAAC4B,GAAG,CAAC,4BAA4BL,KAAK,GAAG,EAAEtB,WAAW,CAACwB,QAAQ,CAAC,CAAC;IAC3G,IAAGE,MAAM,GAAC,GAAG,EAAE,MAAMD,IAAI;IACzBF,QAAQ,CAACP,iBAAiB,CAACS,IAAI,CAAC,CAAC;IACjCF,QAAQ,CAACrB,UAAU,CAAC,KAAK,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAO0B,KAAK,EAAE;IAAA,IAAAQ,qBAAA;IACZb,QAAQ,CAACrB,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3B4B,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClBL,QAAQ,CAACtB,YAAY,EAAAmC,qBAAA,GAACR,KAAK,CAACI,QAAQ,CAACP,IAAI,cAAAW,qBAAA,uBAAnBA,qBAAA,CAAqBH,MAAM,EAACL,KAAK,CAACI,QAAQ,CAACN,MAAM,CAAC,CAAC;IACzE,MAAME,KAAK,CAACI,QAAQ,CAACP,IAAI;EAC7B;AAEJ,CAAC;AAED,OAAO,MAAMY,eAAe,GAAGA,CAAA,KAAM,OAAOd,QAAQ,EAAEC,QAAQ,KAAK;EAC/D,IAAI;IACA,MAAM;MAACC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAM3B,aAAa,CAAC4B,GAAG,CAAC,0BAA0B,EAAE3B,WAAW,CAACwB,QAAQ,CAAC,CAAC;IACjG,IAAGE,MAAM,GAAC,GAAG,EAAE,MAAMD,IAAI;IACzBF,QAAQ,CAACJ,eAAe,CAACM,IAAI,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAU,qBAAA;IACZR,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;IAClBL,QAAQ,CAACtB,YAAY,EAAAqC,qBAAA,GAACV,KAAK,CAACI,QAAQ,CAACP,IAAI,cAAAa,qBAAA,uBAAnBA,qBAAA,CAAqBL,MAAM,EAACL,KAAK,CAACI,QAAQ,CAACN,MAAM,CAAC,CAAC;IACzE,MAAME,KAAK,CAACI,QAAQ,CAACP,IAAI;EAC7B;AACJ,CAAC;AAED,eAAejB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}